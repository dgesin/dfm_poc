//
// Mixins
// --------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
.clearfix() {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }
  &:after {
    clear: both;
  }
}

// Webkit-style focus
// ------------------
.tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Sizing shortcuts
// -------------------------
.size(@height, @width) {
  width: @width;
  height: @height;
}
.square(@size) {
  .size(@size, @size);
}

// Placeholder text
// -------------------------
.placeholder(@color: @placeholderText) {
  &:-moz-placeholder            { color: @color; } // Firefox 4-18
  &::-moz-placeholder           { color: @color; } // Firefox 19+
  &:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
.text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// CSS image replacement
// -------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
.hide-text() {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// FONTS
// --------------------------------------------------
#font {
  #family {
    .serif() {
      font-family: @serifFontFamily;
    }
    .sans-serif() {
      font-family: @sansFontFamily;
    }
    .monospace() {
      font-family: @monoFontFamily;
    }
  }
  .shorthand(@size: @baseFontSize, @weight: normal, @height: @baseLineHeight, @family: @baseFontFamily)  {
   font: @weight @size e('/') @height @family;
  }
  .serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight, @family:@serifFontFamily) {
    #font > .shorthand(@size, @weight, @lineHeight, @family);
  }
  .sans-serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight, @family:@sansFontFamily) {
    #font > .shorthand(@size, @weight, @lineHeight, @family);
  }
  .monospace(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight,  @family:@monoFontFamily) {
    #font > .shorthand(@size, @weight, @lineHeight, @family);
  }
  .slab-serif(@size: @baseFontSize, @weight: 700, @lineHeight: @baseLineHeight, @family: @slabFontFamily) {
	#font > .shorthand(@size, @weight, @lineHeight, @family);
  }
}

// FORMS
// --------------------------------------------------

// Block level inputs
.input-block-level() {
  display: block;
  width: 100%!important;
  min-height: @inputHeight; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
}

// Mixin for form field states
.formFieldState(@textColor: #555, @borderColor: #ccc, @backgroundColor: #f5f5f5) {
  // Set the text color
  .control-label,
  .help-block,
  .help-inline {
    color: @textColor;
  }
  // Style inputs accordingly
  .checkbox,
  .radio,
  input,
  select,
  textarea {
    color: @textColor;
  }
  input,
  select,
  textarea {
    border-color: @borderColor;
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075); // Redeclare so transitions work
    &:focus {
      border-color: darken(@borderColor, 10%);
      box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@borderColor, 20%);
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: @textColor;
    background-color: @backgroundColor;
    border-color: @textColor;
  }
}

// CSS3 PROPERTIES
// --------------------------------------------------

// Single Side Border Radius
.border-top-radius(@radius) {
  border-top-right-radius: @radius;
  border-top-left-radius: @radius;
}
.border-right-radius(@radius) {
  border-top-right-radius: @radius;
  border-bottom-right-radius: @radius;
}
.border-bottom-radius(@radius) {
  border-bottom-right-radius: @radius;
  border-bottom-left-radius: @radius;
}
.border-left-radius(@radius) {
  border-top-left-radius: @radius;
  border-bottom-left-radius: @radius;
}
// Drop shadows
.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1
          box-shadow: @shadow;
}
// Transitions
.transition(@transition) {
  -webkit-transition: @transition;
     -moz-transition: @transition;
       -o-transition: @transition;
          transition: @transition;
}
.transition-delay(@transition-delay) {
  -webkit-transition-delay: @transition-delay;
     -moz-transition-delay: @transition-delay;
       -o-transition-delay: @transition-delay;
          transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
  -webkit-transition-duration: @transition-duration;
     -moz-transition-duration: @transition-duration;
       -o-transition-duration: @transition-duration;
          transition-duration: @transition-duration;
}

// Transformations
.rotate(@degrees) {
  -webkit-transform: rotate(@degrees);
     -moz-transform: rotate(@degrees);
      -ms-transform: rotate(@degrees);
       -o-transform: rotate(@degrees);
          transform: rotate(@degrees);
}
.scale(@ratio) {
  -webkit-transform: scale(@ratio);
     -moz-transform: scale(@ratio);
      -ms-transform: scale(@ratio);
       -o-transform: scale(@ratio);
          transform: scale(@ratio);
}
.translate(@x, @y) {
  -webkit-transform: translate(@x, @y);
     -moz-transform: translate(@x, @y);
      -ms-transform: translate(@x, @y);
       -o-transform: translate(@x, @y);
          transform: translate(@x, @y);
}
.skew(@x, @y) {
  -webkit-transform: skew(@x, @y);
     -moz-transform: skew(@x, @y);
      -ms-transform: skewX(@x) skewY(@y); // See https://github.com/twitter/bootstrap/issues/4885
       -o-transform: skew(@x, @y);
          transform: skew(@x, @y);
  -webkit-backface-visibility: hidden; // See https://github.com/twitter/bootstrap/issues/5319
}
.translate3d(@x, @y, @z) {
  -webkit-transform: translate3d(@x, @y, @z);
     -moz-transform: translate3d(@x, @y, @z);
       -o-transform: translate3d(@x, @y, @z);
          transform: translate3d(@x, @y, @z);
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
.backface-visibility(@visibility){
	-webkit-backface-visibility: @visibility;
	   -moz-backface-visibility: @visibility;
	        backface-visibility: @visibility;
}

// Background clipping
.background-clip(@clip) {
  -webkit-background-clip: @clip;
     -moz-background-clip: @clip;
          background-clip: @clip;
}

// Background sizing
.background-size(@size) {
  -webkit-background-size: @size;
     -moz-background-size: @size;
       -o-background-size: @size;
          background-size: @size;
}


// Box sizing
.box-sizing(@boxmodel) {
  -webkit-box-sizing: @boxmodel;
     -moz-box-sizing: @boxmodel;
          box-sizing: @boxmodel;
}

// User select
// For selecting text on the page
.user-select(@select) {
  -webkit-user-select: @select;
     -moz-user-select: @select;
      -ms-user-select: @select;
       -o-user-select: @select;
          user-select: @select;
}

// Resize anything
.resizable(@direction) {
  resize: @direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// CSS3 Content Columns
.content-columns(@columnCount, @columnGap: @gridGutterWidth) {
  -webkit-column-count: @columnCount;
     -moz-column-count: @columnCount;
          column-count: @columnCount;
  -webkit-column-gap: @columnGap;
     -moz-column-gap: @columnGap;
          column-gap: @columnGap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
  word-wrap: break-word;
  -webkit-hyphens: @mode;
     -moz-hyphens: @mode;
      -ms-hyphens: @mode;
       -o-hyphens: @mode;
          hyphens: @mode;
}

// Opacity
.opacity(@opacity) {
  opacity: @opacity;
  // IE8 filter
  @opacity-ie: (@opacity * 100);
  filter: ~"alpha(opacity=@{opacity-ie})";
}


// BACKGROUNDS
// --------------------------------------------------

// Gradients
#gradient {
  .horizontal(@startColor: #555, @endColor: #333) {
    background-color: @endColor;
    background-image: -webkit-gradient(linear, 0 0, 100% 0, from(@startColor), to(@endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(left, @startColor, @endColor); // Safari 5.1+, Chrome 10+
    background-image: -moz-linear-gradient(left, @startColor, @endColor); // FF 3.6+
    background-image: linear-gradient(to right, @startColor, @endColor); // Standard, IE10
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@startColor),argb(@endColor))); // IE9 and down
  }
  .vertical(@startColor: #555, @endColor: #333) {
    background-color: @endColor;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), to(@endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(top, @startColor, @endColor); // Safari 5.1+, Chrome 10+
    background-image: -moz-linear-gradient(top, @startColor, @endColor); // FF 3.6+
    background-image: linear-gradient(to bottom, @startColor, @endColor); // Standard, IE10
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@startColor),argb(@endColor))); // IE9 and down
  }
  .directional(@startColor: #555, @endColor: #333, @deg: 45deg) {
    background-color: @endColor;
    background-repeat: repeat-x;
    background-image: -webkit-linear-gradient(@deg, @startColor, @endColor); // Safari 5.1+, Chrome 10+
    background-image: -moz-linear-gradient(@deg, @startColor, @endColor); // FF 3.6+
    background-image: linear-gradient(@deg, @startColor, @endColor); // Standard, IE10
  }
  .horizontal-three-colors(@startColor: #00b3ee, @midColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f) {
    background-color: mix(@midColor, @endColor, 80%);
    background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from(@startColor), color-stop(@colorStop, @midColor), to(@endColor));
    background-image: -webkit-linear-gradient(left, @startColor, @midColor @colorStop, @endColor);
    background-image: -moz-linear-gradient(left, @startColor, @midColor @colorStop, @endColor);
    background-image: linear-gradient(to right, @startColor, @midColor @colorStop, @endColor);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@startColor),argb(@endColor))); // IE9 and down, gets no color-stop at all for proper fallback
  }

  .vertical-three-colors(@startColor: #00b3ee, @midColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f) {
    background-color: mix(@midColor, @endColor, 80%);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), color-stop(@colorStop, @midColor), to(@endColor));
    background-image: -webkit-linear-gradient(@startColor, @midColor @colorStop, @endColor);
    background-image: -moz-linear-gradient(top, @startColor, @midColor @colorStop, @endColor);
    background-image: linear-gradient(@startColor, @midColor @colorStop, @endColor);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@startColor),argb(@endColor))); // IE9 and down, gets no color-stop at all for proper fallback
  }
  .radial(@innerColor: #555, @outerColor: #333) {
    background-color: @outerColor;
    background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@innerColor), to(@outerColor));
    background-image: -webkit-radial-gradient(circle, @innerColor, @outerColor);
    background-image: -moz-radial-gradient(circle, @innerColor, @outerColor);
    background-image: radial-gradient(circle, @innerColor, @outerColor);
    background-repeat: no-repeat;
  }
  .striped(@color: #555, @angle: 45deg) {
    background-color: @color;
    background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
    background-image: -webkit-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: -moz-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  }
}
// Reset filters for IE
.reset-filter() {
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}


// RETINA IMAGE SUPPORT
// --------------------------------------------------

// Short retina mixin for setting background-image and -size
.retina-image(@file-1x, @file-2x, @width-1x, @height-1x) {
  background-image: url("@{file-1x}");

  //@media only screen and (-webkit-min-device-pixel-ratio: 2)
  //@media only screen and (   min--moz-device-pixel-ratio: 2),
  //@media only screen and (     -o-min-device-pixel-ratio: 2/1),
  //@media only screen and (        min-device-pixel-ratio: 2),
  //@media only screen and (                min-resolution: 192dpi),
  //@media only screen and (                min-resolution: 2dppx) 
  
  //{
    background-image: url("@{file-2x}");
    background-size: @width-1x @height-1x;
  //}
}


// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
.nav-divider(@top: #e5e5e5, @bottom: #fff) {
  height: 2px; // 1px for background, one for border
  margin: ((@baseLineHeight / 2) - 1);
  overflow: hidden;
  background-color: @top;
  border-bottom: 1px solid @bottom;
}

// Button psuedo states
// -------------------------
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
.btn-pseudo-states(@background, @border) {
  background-color: @background;
  border-color: @border;

  &:hover,
  &:focus,
  &:active,
  &.active {
    background-color: darken(@background, 10%);
        border-color: darken(@border, 10%);
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &:hover,
    &:focus,
    &:active {
      background-color: @background;
          border-color: @border
    }
  }
}

// Navbar vertical align 
// ---------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
.navbar-vertical-align(@elementHeight) {
  margin-top: (@navbarHeight - @elementHeight) / 2;
  margin-bottom: (@navbarHeight - @elementHeight) / 2;
}


// Grid System
// -----------

// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  .clearfix();
}

// Make a grid

// Creates a wrapper for a series of columns
.make-row() {
  // Then clear the floated columns
  .clearfix();

  // Negative margin nested rows out to align the content of columns
  .row {
    margin-left:  (@gridGutterWidth / -2);
    margin-right: (@gridGutterWidth / -2);
  }
}
// Generate the columns
.make-column(@columns) {
  position: relative;
  // Float and set width: 100%; for easy stacking on mobile devices
  float: left;
  width: 100%;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gridGutterWidth / 2);
  padding-right: (@gridGutterWidth / 2);

  // Calculate width based on number of columns available
  @media (min-width: @gridFloatBreakpoint) {
    width: percentage((@columns / @gridColumns));
  }
}
// Generate the column offsets
.make-column-offset(@columns) {
  @media (min-width: @gridFloatBreakpoint) {
    margin-left: percentage((@columns / @gridColumns));
  }
}
.make-column-push(@columns) {
  @media (min-width: @gridFloatBreakpoint) {
    left: percentage((@columns / @gridColumns));
  }
}
.make-column-pull(@columns) {
  @media (min-width: @gridFloatBreakpoint) {
    right: percentage((@columns / @gridColumns));
  }
}




// Small grid columns
.generate-grid-columns(@gridColumns) {
/*  .col-sm-X (@index) when (@index > 0) {
    (~".col-sm-@{index}") { .col-sm-(@index); }
    .col-sm-X((@index - 1));
  }
  .col-sm-X (0) {}

  // Generate columns
  .col-sm-X(@gridColumns);

  // Apply the styles
  .col-sm-(@columns) {
    width: percentage((@columns / @gridColumns));
  }*/
}

// Large grid columns
.generate-large-grid-columns(@gridColumns) {

  /*.col-lg-X (@index) when (@index > 0) {
      (~".col-lg-@{index}") { .col-lg-(@index); }
      .col-lg-X((@index - 1));
    }
    .col-lg-X (0) {}

    // Generate the columns
    .col-lg-X(@gridColumns);

    // Apply the styles
    .col-lg-(@columns) {
      width: percentage((@columns / @gridColumns));
    }

    // Offsets (gaps between columns)
    .col-offset-X (@index) when (@index > 0) {
      (~".col-offset-@{index}") { .col-offset-(@index); }
      .col-offset-X((@index - 1));
    }
    .col-offset-X (0) {}

    // Source ordering
    .col-push-X (@index) when (@index > 0) {
      (~".col-push-@{index}") { .col-push-(@index); }
      .col-push-X((@index - 1));
    }
    .col-push-X (0) {}

    // Source ordering
    .col-pull-X (@index) when (@index > 0) {
      (~".col-pull-@{index}") { .col-pull-(@index); }
      .col-pull-X((@index - 1));
    }
    .col-pull-X (0) {}

    // Apply the styles
    .col-offset-(@columns) {
      margin-left: percentage((@columns / @gridColumns));
    }
    .col-push-(@columns) {
      left: percentage((@columns / @gridColumns));
    }
    .col-pull-(@columns) {
      right: percentage((@columns / @gridColumns));
    }

    // Generate .spanX and .offsetX
    .col-offset-X(@gridColumns);
    .col-push-X(@gridColumns);
    .col-pull-X(@gridColumns);*/
}



// Framework mixins
// --------------------------------------------------

// Generate rem font-sizes with pixel fallbacks
// By default uses `@font-size-base` with an initial value of 14 (1.4rem or 14px)
.font-size(@fontSize: @fontSizeBase) {
  @rem-size: (@fontSize / 10);
  font-size: ~"@{font-size}px";
  font-size: ~"@{rem-size}rem";
}

// Generate form validation states
.formFieldState(@textColor: #555, @borderColor: #ccc, @backgroundColor: #f5f5f5) {
  // Color the label text
  .control-label {
    color: @textColor;
  }
  // Set the border and box shadow on specific inputs to match
  .input-with-feedback {
    padding-right: 32px; // to account for the feedback icon
    border-color: @borderColor;
    .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken(@borderColor, 10%);
      @shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@borderColor, 20%);
      .box-shadow(@shadow);
    }
  }
}









// depreciated????

// Button backgrounds
// ------------------
.buttonBackground(@startColor, @endColor, @textColor: #fff, @textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  .gradientBar(@startColor, @endColor, @textColor, @textShadow);
  .reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:focus, &:active, &.active, &.disabled, &[disabled] {
    color: @textColor;
    background-color: @endColor;
  }

  // IE 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    background-color: darken(@endColor, 10%) e("\9");
  }
}


// The Grid -- FOUNDATION

#grid {
/*  .core () {
    .spanX (@index) when (@index > 0) {
      (~".span@{index}, .row .span@{index}") { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (@_) {}
	
    .offsetX (@index) when (@index > 0) {
      (~".row .offset@{index}") { .offset(@index); }
      .offsetX(@index - 1);
    }
    .offsetX (@_) {}
	
    .pushpullX (@index) when (@index > 1) {
      (~".push@{index}") { .push(@index); }
      (~".pull@{index}") { .pull(@index); }
      .pushpullX(@index - 1);
    }
    .pushpullX (@_) {}

    .offset (@columns) {
      margin-left: percentage(@pxColumnWidth * @columns / @siteDefaultWidth);
    }
    .span (@columns) {
      width: percentage(@pxColumnWidth * @columns / @siteDefaultWidth);
    }
	.push (@columns) {
		left:percentage(@pxColumnWidth * @columns / @siteDefaultWidth);
	}
	.pull (@columns) {
		right:percentage(@pxColumnWidth * @columns / @siteDefaultWidth);
	}

    // generate .spanX, .offsetX, .pushX and .pullX
    .spanX (@gridColumns);
    .offsetX (@gridColumns - 1);
    .pushpullX (@gridColumns - 1);
  }

  .block-grid () {
    ul.block-grid { 
      display: block; 
      overflow: hidden; 
      padding: 0; 
    }
    ul.block-grid > li { 
      display: block; 
      height: auto; 
      float: left; 
    }
    .upX(@index) when (@index > 4) {
      (~".block-grid.up@{index}") { margin: 0 -8px; }
      (~".block-grid.up@{index} > li") { width: 100% / @index; padding: 0 8px 8px; }
      (~".block-grid.up@{index} > li:nth-child(@{index}n+1)") { clear: both; }
      .upX(@index - 1);
    }
    .upX(@index) when (@index = 4) {
      .block-grid.up4 { margin: 0 -10px; }
      .block-grid.up4 > li { width: 25%; padding: 0 10px 10px; }
      .block-grid.up4 > li:nth-child(4n+1) { clear: both; }
      .upX(@index - 1);
    }
    .upX(@index) when (@index = 3) {
      .block-grid.up3 { margin: 0 -12px; }
      .block-grid.up3 > li { width: 33.33333%; padding: 0 12px 12px; }
      .block-grid.up3 > li:nth-child(3n+1) { clear: both; }
      .upX(@index - 1);
    }
    .upX(@index) when (@index = 2) {
      .block-grid.up2 { margin: 0 -15px; }
      .block-grid.up2 > li { width: 50%; padding: 0 15px 15px; }
      .block-grid.up2 > li:nth-child(2n+1) { clear: both; }
      .upX(@index - 1);
    }
    .upX(@index) when (@index = 1) {
      .block-grid.up1 { margin: 0; }
      .block-grid.up1 > li { width: 100%; padding: 0 0 15px; }
    }
    .upX (@_) {}
    .upX(@gridColumns);
  }

  // Mobile 4-column Grid
  .mobile-grid() {
    .row .mobile-span1 { width: 25% !important; float: left; padding: 0 15px; }
    .row .mobile-span1:last-child { float: right; }
    .row .mobile-span1.end { float: left; }
    .row.collapse .mobile-span1 { padding: 0; }
    .row .mobile-span2 { width: 50% !important; float: left; padding: 0 15px; }
    .row .mobile-span2:last-child { float: right; }
    .row .mobile-span2.end { float: left; }
    .row.collapse .mobile-span2 { padding: 0; }
    .row .mobile-span3 { width: 75% !important; float: left; padding: 0 15px; }
    .row .mobile-span3:last-child { float: right; }
    .row .mobile-span3.end { float: left; }
    .row.collapse .mobile-span3 { padding: 0; }
    .row .mobile-span4 { width: 100% !important; float: left; padding: 0 15px; }
    .row .mobile-span4:last-child { float: right; }
    .row .mobile-span4.end { float: left; }
    .row.collapse .mobile-span4 { padding: 0; }

    .push1-mobile { left: 25%; }
    .pull1-mobile { right: 25%; }
    .push2-mobile { left: 50%; }
    .pull2-mobile { right: 50%; }
    .push3-mobile { left: 75%; }
    .pull3-mobile { right: 75%; }

    // Block Grids
    .block-grid.mobile > li { float: none; width: 100%; margin-left: 0; }
    .block-grid > li { clear: none; }
    .upX(@index) when (@index > 4) {
      (~".block-grid.mobile-up@{index} > li") { width: 100% / @index; }
      (~".block-grid.mobile-up@{index} > li:nth-child(@{index}n+1)") { clear: both; }
      .upX(@index - 1);
    }
    .upX(@index) when (@index = 4) {
      .block-grid.mobile-up4 > li { width: 25%; }
      .block-grid.mobile-up4 > li:nth-child(4n+1) { clear: both; }
      .upX(@index - 1);
    }
    .upX(@index) when (@index = 3) {
      .block-grid.mobile-up3 > li { width: 33.33333%; }
      .block-grid.mobile-up3 > li:nth-child(3n+1) { clear: both; }
      .upX(@index - 1);
    }
    .upX(@index) when (@index = 2) {
      .block-grid.mobile-up2 > li { width: 50%; }
      .block-grid.mobile-up2 > li:nth-child(2n+1) { clear: both; }
      .upX(@index - 1);
    }
    .upX(@index) when (@index = 1) {
      .block-grid.mobile-up1 > li { width: 100%; }
    }
    .upX (@_) {}
    .upX(@gridColumns);
  }*/

}